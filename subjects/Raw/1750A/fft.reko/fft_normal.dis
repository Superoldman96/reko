word16 reverse(word16 gp0, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      fn0100
//      init_fft
// MayUse:  gp0:[0..15]
// LiveOut: gp0:[0..15]-init_fft gp14:[0..15]-init_fft
// Trashed: CPZN gp0 gp1 gp14 gp2 gp3 gp4
// Preserved: gp15 gp5
reverse_entry:
l0115:
	gp0_25 = 0<16>
	gp1_12 = 0<16>
l011B:
	gp1_13 = -gp1_12
	branch (__shift_arithmetic<word16,word16>(gp0, gp1_13) & 1<16>) == 0<16> l0128
l0122:
	gp0_25 = gp0_25 | __shift_logical<word16,word16>(1<16>, 3<16> - gp1_13)
l0128:
	gp1_12 = gp1_13 + 1<16>
	branch gp1_13 <= 2<16> l011B
l012B:
	gp14Out = fp
	return gp0_25
reverse_exit:


word16 init_fft(word16 & gp4Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      main
// MayUse: 
// LiveOut: gp3:[0..15]-main gp4:[0..15]-main
// Trashed: CPZN gp0 gp1 gp14 gp15 gp2 gp3 gp4 gp5 gp6
// Preserved:
init_fft_entry:
l012E:
	gp14_11 = fp - 1<16>
	gp3_42 = 0<16>
l0132:
	Mem12[gp14_11 + 1<16>:word16] = gp3_42
	gp0_13 = reverse(gp3_42, out gp14_11)
	gp3_26 = Mem12[gp14_11 + 1<16>:word16]
	Mem35[gp0_13 * 3<16> + 0x8030<16>:real48] = Mem12[gp3_26 * 3<16> + 0x8000<16>:real48]
	gp4_gp5_gp6_36 = Mem35[0x8000<p16>:real48]
	Mem41[gp0_13 * 3<16> + 0x8060<16>:real48] = gp4_gp5_gp6_36
	gp4_37 = SLICE(gp4_gp5_gp6_36, word16, 32) (alias)
	gp3_42 = gp3_26 + 1<16>
	branch gp3_26 <= 0xE<16> l0132
l014A:
	gp4Out = gp4_37
	return gp3_26 + 1<16>
init_fft_exit:


word16 compute_output()
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      main
// MayUse: 
// LiveOut: gp14:[0..15]-main
// Trashed: CPZN gp0 gp1 gp10 gp14 gp15 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved:
compute_output_entry:
l014E:
	gp14_46 = fp - 2<16>
	gp9_6 = 0<16>
l0152:
	gp8_11 = gp9_6 * 3<16>
	gp5_gp6_gp7_14 = Mem13[gp9_6 * 3<16> + 0x8030<16>:real48]
	gp2_gp3_gp4_15 = Mem13[gp9_6 * 3<16> + 0x8060<16>:real48]
	Mem47[gp14_46 + 1<16>:word32] = SEQ(gp8_11, gp9_6)
	gp5_gp6_gp7_36 = gp5_gp6_gp7_14 * gp5_gp6_gp7_14 + gp2_gp3_gp4_15 * gp2_gp3_gp4_15
	Mem66[Mem47[gp14_46 + 1<16>:word16] + 0x8090<16>:real48] = sqrt(SLICE(gp5_gp6_gp7_36, word32, 0), SLICE(gp5_gp6_gp7_36, word16, 0), out gp14_46)
	gp9_67 = Mem66[gp14_46 + 2<16>:word16]
	gp9_6 = gp9_67 + 1<16>
	branch gp9_67 <= 0xE<16> l0152
l016B:
	return gp14_46
compute_output_exit:


void fft(word16 gp3, word16 gp4)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      main
// MayUse:  gp3:[0..15] gp4:[0..15]
// LiveOut:
// Trashed: CPZN gp0 gp1 gp10 gp14 gp15 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp11 gp12 gp13
fft_entry:
l016F:
	gp14_220 = fp - 0xF<16>
l0174:
	Mem12[gp14_220 + 1<16>:word16] = Mem9[gp14_220 + 2<16>:word16] << 1<16>
	Mem13[gp14_220 + 3<16>:word16] = 0<16>
	branch Mem13[gp14_220 + 3<16>:word16] >= Mem13[gp14_220 + 2<16>:word16] l01E3
l0181:
	Mem30[gp14_220 + 0xA<16>:real48] = CONVERT(SEQ(Mem13[gp14_220 + 2<16>:word16], gp3) >> 0x10<16>, int32, real48)
l0187:
	gp3_gp4_gp5_49 = CONVERT(SEQ(Mem32[gp14_220 + 3<16>:word16], gp4) >> 0x10<16>, int32, real48) * Mem32[0x8003<p16>:real48] / Mem32[gp14_220 + 0xA<16>:real48]
	Mem59[gp14_220 + 0xD<16>:real48] = gp3_gp4_gp5_49
	Mem75[gp14_62 + 4<16>:real48] = cos(SLICE(gp3_gp4_gp5_49, word32, 0), SLICE(gp3_gp4_gp5_49, word16, 0), out gp14_62)
	gp3_gp4_gp5_76 = Mem75[gp14_62 + 0xD<16>:real48]
	Mem103[gp14_220 + 7<16>:real48] = sin(SLICE(gp3_gp4_gp5_76, word32, 0), SLICE(gp3_gp4_gp5_76, word16, 0), out gp3, out gp4, out gp14_220)
	gp0_104 = Mem103[gp14_220 + 3<16>:word16]
	branch gp0_104 >= 0x10<16> l01DC
l01A4:
	gp11_122 = (Mem108[gp14_220 + 2<16>:word16] + gp0_104) * 3<16> + 0x8060<16>
	gp8_gp9_gp10_137 = Mem108[gp14_220 + 4<16>:real48] * Mem108[0x8030<16>:real48] - Mem108[gp14_220 + 7<16>:real48] * Mem108[gp11_122:real48]
	gp5_gp6_gp7_158 = Mem108[gp14_220 + 7<16>:real48] * Mem108[0x8030<16>:real48] + Mem108[gp14_220 + 4<16>:real48] * Mem108[gp11_122:real48]
	Mem177[0x8030<16>:real48] = Mem108[0x8030<16>:real48] - gp8_gp9_gp10_137
	gp1_161 = gp0_104 * 3<16>
	gp2_gp3_gp4_188 = Mem177[gp0_104 * 3<16> + 0x8060<16>:real48] - gp5_gp6_gp7_158
	Mem193[gp11_122:real48] = gp2_gp3_gp4_188
	Mem200[0x8030<16>:real48] = gp8_gp9_gp10_137 + Mem193[0x8030<16>:real48]
	Mem207[gp1_161 + 0x8060<16>:real48] = gp5_gp6_gp7_158 + Mem200[gp0_104 * 3<16> + 0x8060<16>:real48]
	gp3 = SLICE(gp2_gp3_gp4_188, word16, 16) (alias)
	gp4 = SLICE(gp2_gp3_gp4_188, word16, 0) (alias)
	gp0_104 = gp0_104 + Mem207[gp14_220 + 1<16>:word16]
	branch gp0_104 < 0x10<16> l01A4
l01DC:
	Mem215[gp14_220 + 3<16>:word16] = Mem213[gp14_220 + 3<16>:word16] + 1<16>
	branch Mem215[gp14_220 + 3<16>:word16] < Mem215[gp14_220 + 2<16>:word16] l0187
l01E3:
	gp8_222 = Mem221[gp14_220 + 1<16>:word16]
	Mem223[gp14_220 + 2<16>:word16] = gp8_222
	branch gp8_222 < 0x10<16> l0174
l01EA:
	return
fft_exit:


void main()
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse: 
// LiveOut:
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp15 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved:
main_entry:
l01EE:
	gp3_22 = 0<16>
l01F4:
	Mem21[gp3_22 * 3<16> + 0x8000<16>:real48] = Mem15[0x8006<p16>:real48]
	gp3_22 = gp3_22 + 1<16>
	branch gp3_22 <= 7<16> l01F4
l01FF:
	gp3_26 = 8<16>
l0202:
	Mem41[gp3_26 * 3<16> + 0x8000<16>:real48] = Mem35[0x8009<p16>:real48]
	gp3_26 = gp3_26 + 1<16>
	branch gp3_26 <= 0xF<16> l0202
l020D:
	fft(init_fft(out gp4_52), gp4_52)
	gp14_107 = compute_output()
	gp3_129 = 0<16>
l0214:
	gp0_gp1_gp2_101 = Mem100[gp3_129 * 3<16> + 0x8090<16>:real48]
	Mem108[gp14_107 + 1<16>:word16] = gp3_129
	gp14_107 = pr_fp_num(SLICE(gp0_gp1_gp2_101, word32, 0))
	gp3_128 = Mem108[gp14_107 + 1<16>:word16]
	gp3_129 = gp3_128 + 1<16>
	branch gp3_128 <= 7<16> l0214
l0222:
	return
main_exit:


word16 frex(word16 gp1, word16 gp3)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      sqrt
// MayUse:  gp1:[0..15] gp3:[0..15]
// LiveOut: gp1:[0..15]-sqrt
// Trashed: CPZN gp1 gp4 gp5
// Preserved: gp15
frex_entry:
l0226:
	gp5_5 = Mem0[gp3:word16]
	gp1_21 = gp1 & 0xFF00<16>
	gp4_13 = gp1 & 0xFF<16>
	branch True<16> l0231
l022F:
	gp4_13 = gp1 & 0xFF<16> | 0xFF00<16>
l0231:
	branch (gp4_13 & 0x8000<u16>) == 0<16> l0236
l0233:
	gp4_13 = gp4_13 + 1<16>
	gp1_21 = gp1 & 0xFF00<16> | 0xFF<16>
l0236:
	Mem31[gp5_5 + 1<16>:word16] = (gp4_13 >>u 1<16> & 0xFF<16>) + 1<16> & 0xFF<16>
	Mem32[gp5_5 + 2<16>:word16] = 0<16>
	Mem35[gp5_5:word16] = 0x4000<16>
	return gp1_21
frex_exit:


real48 sqrt(word32 gp0_gp1, word16 gp2, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      compute_output
//      asin
// MayUse:  gp2:[0..15] Sequence gp0:gp1:[0..31]
// LiveOut: Sequence gp0:gp1:gp2:[0..47]-compute_output gp14:[0..15]-compute_output
// Trashed: CPZN gp0 gp1 gp10 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
sqrt_entry:
	gp0 = SLICE(gp0_gp1, word16, 16)
	gp1 = SLICE(gp0_gp1, word16, 0)
l0245:
	branch gp0_gp1 < 0<32> l026D
l024C:
	gp1_25 = frex(gp1, 1<16>)
	gp2_gp3_gp4_62 = Mem0[0x8012<p16>:real48] - Mem0[0x800F<p16>:real48] / (SEQ(gp0, gp1_25, gp2) + Mem0[0x800C<p16>:real48])
	gp2_gp3_gp4_83 = (gp2_gp3_gp4_62 + SEQ(gp0, gp1_25, gp2) / gp2_gp3_gp4_62) * Mem0[0x8015<p16>:real48]
	gp2_gp3_gp4_100 = (gp2_gp3_gp4_83 + SEQ(gp0, gp1_25, gp2) / gp2_gp3_gp4_83) * Mem0[0x8015<p16>:real48]
	gp0_gp1_gp2_112 = SEQ(SLICE(gp2_gp3_gp4_100, word32, 0), SLICE(gp2_gp3_gp4_100, word16, 0)) * rLoc02
	gp0_113 = SLICE(gp0_gp1_gp2_112, word16, 32) (alias)
	gp1_114 = SLICE(gp0_gp1_gp2_112, word16, 16) (alias)
	gp2_115 = SLICE(gp0_gp1_gp2_112, word16, 0) (alias)
	goto l026F
l026D:
	gp0_gp1_gp2_17 = Mem0[0x8018<p16>:real48]
	gp0_113 = SLICE(gp0_gp1_gp2_17, word16, 32) (alias)
	gp1_114 = SLICE(gp0_gp1_gp2_17, word16, 16) (alias)
	gp2_115 = SLICE(gp0_gp1_gp2_17, word16, 0) (alias)
l026F:
	gp14Out = fp - 3<16>
	return SEQ(gp0_113, gp1_114, gp2_115)
sqrt_exit:


word32 auxasin(real48 gp0_gp1_gp2, word16 & gp2Out, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      asin
// MayUse:  Sequence gp0:gp1:gp2:[0..47]
// LiveOut: Sequence gp0:gp1:[0..31]-asin gp14:[0..15]-asin gp2:[0..15]-asin
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
auxasin_entry:
l0273:
	gp5_gp6_gp7_16 = gp0_gp1_gp2 * gp0_gp1_gp2
	gp7_17 = SLICE(gp5_gp6_gp7_16, word16, 0) (alias)
	gp0_gp1_gp2_76 = gp0_gp1_gp2 * ((SEQ(SLICE(gp5_gp6_gp7_16, word32, 0), gp7_17) * Mem9[0x801B<p16>:real48]) / ((SEQ(SLICE(gp5_gp6_gp7_16, word32, 0), gp7_17) + Mem9[0x801E<p16>:real48]) + Mem9[0x8024<p16>:real48] / (gp5_gp6_gp7_16 + Mem9[0x8021<p16>:real48])) + Mem9[0x8027<p16>:real48])
	gp2Out = SLICE(gp0_gp1_gp2_76, word16, 0)
	gp14Out = fp - 3<16>
	return SLICE(gp0_gp1_gp2_76, word32, 16)
auxasin_exit:


void asin(word32 gp0_gp1, word16 gp2)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  gp2:[0..15] Sequence gp0:gp1:[0..31]
// LiveOut:
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp15 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved:
asin_entry:
l0294:
	gp8_gp9_gp10_13 = Mem0[0x802A<p16>:real48]
	gp10_23 = SLICE(gp8_gp9_gp10_13, word16, 0) (alias)
	gp2_gp3_gp4_262 = SEQ(gp0_gp1, gp2) (alias)
	branch gp0_gp1 >= 0<32> l02A4
l02A1:
	gp2_gp3_gp4_262 = SEQ(SLICE(gp8_gp9_gp10_13, word32, 0), gp10_23) - SEQ(gp0_gp1, gp2)
l02A4:
	branch gp2_gp3_gp4_262 > Mem14[0x802D<p16>:real48] l02DB
l02A8:
	gp5_gp6_gp7_266 = SEQ(gp0_gp1, gp2) (alias)
	branch gp0_gp1 >= 0<32> l02B2
l02AB:
	gp2_gp3_gp4_59 = Mem14[0x802A<p16>:real48] - SEQ(gp0_gp1, gp2)
	gp5_gp6_gp7_266 = SEQ(SLICE(gp2_gp3_gp4_59, word32, 0), SLICE(gp2_gp3_gp4_59, word16, 0)) (alias)
l02B2:
	branch gp5_gp6_gp7_266 > Mem74[0x8030<p16>:real48] l02BE
l02B6:
	auxasin(gp5_gp6_gp7_266, out gp2_278, out gp14_124)
	goto l02D2
l02BE:
	gp2_gp3_gp4_83 = Mem74[0x802D<p16>:real48] - gp5_gp6_gp7_266
	gp0_gp1_gp2_95 = SEQ(SLICE(gp2_gp3_gp4_83, word32, 0), SLICE(gp2_gp3_gp4_83, word16, 0)) * Mem74[0x8030<p16>:real48]
	auxasin(sqrt(SLICE(gp0_gp1_gp2_95, word32, 0), SLICE(gp0_gp1_gp2_95, word16, 0), out gp14_274), out gp2_276, out gp14_124)
l02D2:
	branch Mem74[gp14_124 + 1<16>:word16] == 0<16> l02DB
l02D6:
l02DB:
	return
asin_exit:


void rsin()
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse: 
// LiveOut:
// Trashed: PZN gp0 gp1 gp10 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
rsin_entry:
l02E1:
	return
rsin_exit:


void rcos()
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse: 
// LiveOut:
// Trashed: PZN gp0 gp1 gp14 gp2 gp3 gp4 gp5 gp6 gp7
// Preserved: gp15
rcos_entry:
l02FA:
	return
rcos_exit:


word16 sincos(word16 gp1, word16 gp4, word16 & gp1Out, word16 & gp2Out, word16 & gp3Out, word16 & gp4Out, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      sin
//      cos
// MayUse:  gp1:[0..15] gp4:[0..15]
// LiveOut: gp0:[0..15]-cos gp1:[0..15]-cos gp14:[0..15]-cos gp2:[0..15]-cos gp3:[0..15]-sin gp4:[0..15]-sin
// Trashed: CPZN gp0 gp1 gp14 gp2 gp3 gp4 gp5 gp6 gp7
// Preserved: gp15
sincos_entry:
l0311:
	gp2_12 = gp1
	branch gp1 >= 0<16> l031A
l0319:
	gp2_12 = gp1 + 7<16>
l031A:
	gp2_18 = gp2_12 & 0xFFF8<16>
	branch gp1 - gp2_18 > 7<u16> l0375
l0328:
	gp2_55 = Mem31[gp2_18 + 0x32C<16>:word16]
	call gp2_55 (retsize: 2;)
		uses: gp1:gp2_18,gp2:gp2_55,gp3:gp4,gp4:7<16>,Mem:Mem31
		defs: gp0:gp0_62,gp1:gp1_61,gp14:gp14_58,gp2:gp2_63,gp3:gp3_64,gp4:gp4_59
	gp1Out = gp1_61
	gp2Out = gp2_63
	gp3Out = gp3_64
	gp4Out = gp4_59
	gp14Out = gp14_58
	return gp0_62
l0375:
	gp3_gp4_gp5_46 = Mem31[0x8051<p16>:real48]
	gp1Out = SLICE(gp3_gp4_gp5_46, word16, 0)
	gp2Out = SLICE(gp3_gp4_gp5_46, word16, 0)
	gp3Out = SLICE(gp3_gp4_gp5_46, word16, 32)
	gp4Out = SLICE(gp3_gp4_gp5_46, word16, 16)
	gp14Out = fp
	return SLICE(gp3_gp4_gp5_46, word16, 16)
sincos_exit:


word48 sin(word32 gp0_gp1, word16 gp2, word16 & gp3Out, word16 & gp4Out, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      fft
// MayUse:  gp2:[0..15] Sequence gp0:gp1:[0..31]
// LiveOut: Sequence gp0:gp1:gp2:[0..47]-fft gp14:[0..15]-fft gp3:[0..15]-fft gp4:[0..15]-fft
// Trashed: CPZN gp0 gp1 gp10 gp14 gp15 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved:
sin_entry:
l037C:
	gp5_gp6_gp7_115 = SEQ(gp0_gp1, gp2) (alias)
	branch gp0_gp1 >= 0<32> l0389
l0384:
	gp2_gp3_gp4_19 = Mem0[0x8054<p16>:real48]
	gp5_gp6_gp7_115 = SEQ(SLICE(gp2_gp3_gp4_19, word32, 0), SLICE(gp2_gp3_gp4_19, word16, 0)) - SEQ(gp0_gp1, gp2)
l0389:
	gp5_gp6_gp7_40 = gp5_gp6_gp7_115 * Mem0[0x8057<p16>:real48]
	gp0_gp1_45 = CONVERT(gp5_gp6_gp7_40, real48, int32)
	gp5_gp6_gp7_54 = gp5_gp6_gp7_40 - CONVERT(gp0_gp1_45, int32, real48)
	gp7_55 = SLICE(gp5_gp6_gp7_54, word16, 0) (alias)
	gp4_56 = gp7_55
	gp0_gp1_117 = SEQ(SLICE(gp0_gp1_45, word16, 16), CONVERT(gp5_gp6_gp7_40, real48, word16)) (alias)
	branch gp5_gp6_gp7_54 >= 0.0 l0396
l0392:
	gp4_56 = SLICE(SEQ(SLICE(gp5_gp6_gp7_54, word32, 0), gp7_55) + Mem0[0x805A<p16>:real48], word16, 0) (alias)
	gp0_gp1_117 = gp0_gp1_45 + Mem0[0x805D<p16>:word32]
l0396:
	gp1_80 = SLICE(gp0_gp1_117, word16, 0) (alias)
	branch gp0_gp1 >= 0<32> l039B
l0399:
	gp1_80 = SLICE(gp0_gp1_117, word16, 0) + Mem0[0x805F<p16>:word16] (alias)
l039B:
	gp0_91 = sincos(gp1_80, gp4_56, out gp1_92, out gp2_94, out gp3_95, out gp4_96, out gp14_93)
	gp3Out = gp3_95
	gp4Out = gp4_96
	gp14Out = gp14_93
	return SEQ(gp0_91, gp1_92, gp2_94)
sin_exit:


word48 cos(word32 gp0_gp1, word16 gp2, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      fft
// MayUse:  gp2:[0..15] Sequence gp0:gp1:[0..31]
// LiveOut: Sequence gp0:gp1:gp2:[0..47]-fft gp14:[0..15]-fft
// Trashed: CPZN gp0 gp1 gp14 gp15 gp2 gp3 gp4 gp5 gp6 gp7
// Preserved:
cos_entry:
l03A0:
	gp5_gp6_gp7_94 = SEQ(gp0_gp1, gp2) (alias)
	branch gp0_gp1 >= 0<32> l03AB
l03A6:
	gp2_gp3_gp4_21 = Mem0[0x8061<p16>:real48] - SEQ(gp0_gp1, gp2)
	gp5_gp6_gp7_94 = SEQ(SLICE(gp2_gp3_gp4_21, word32, 0), SLICE(gp2_gp3_gp4_21, word16, 0)) (alias)
l03AB:
	gp5_gp6_gp7_35 = gp5_gp6_gp7_94 * Mem0[0x8064<p16>:real48]
	gp0_gp1_40 = CONVERT(gp5_gp6_gp7_35, real48, int32)
	gp5_gp6_gp7_49 = gp5_gp6_gp7_35 - CONVERT(gp0_gp1_40, int32, real48)
	gp7_50 = SLICE(gp5_gp6_gp7_49, word16, 0) (alias)
	gp4_51 = gp7_50
	gp0_gp1_61 = SEQ(SLICE(gp0_gp1_40, word16, 16), CONVERT(gp5_gp6_gp7_35, real48, word16)) (alias)
	branch gp5_gp6_gp7_49 >= 0.0 l03B8
l03B4:
	gp4_51 = SLICE(SEQ(SLICE(gp5_gp6_gp7_49, word32, 0), gp7_50) + Mem0[0x8067<p16>:real48], word16, 0) (alias)
	gp0_gp1_61 = gp0_gp1_40 + Mem0[0x806A<p16>:word32]
l03B8:
	gp0_75 = sincos(SLICE(gp0_gp1_61, word16, 0) + Mem0[0x806C<p16>:word16], gp4_51, out gp1_76, out gp2_78, out gp3_100, out gp4_101, out gp14_77)
	gp14Out = gp14_77
	return SEQ(gp0_75, gp1_76, gp2_78)
cos_exit:


word16 cvia(word16 gp0, word16 gp1)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_dec_word
// MayUse:  gp0:[0..15] gp1:[0..15]
// LiveOut: gp0:[0..15]-pr_dec_word
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
cvia_entry:
l03BF:
	Mem45[gp0:word16] = 0x2020<16>
	Mem46[gp0 + 1<16>:word16] = 0x2020<16>
	Mem47[gp0 + 2<16>:word16] = 0x2020<16>
	Mem49[gp0 + 3<16>:word16] = 0<16>
	gp11_43 = gp0
	gp13_48 = 0<16>
	gp10_50 = 0x20<16>
	gp1_129 = gp1
	branch gp1 >= 0<16> l03D3
l03D0:
	gp10_50 = 0x2D<16>
	gp1_129 = -gp1
l03D3:
	gp9_57 = 0<16>
l03D4:
	gp9_57 = gp9_57 + 1<16>
	gp1_64 = gp1_129 / 0xA<16>
	gp13_48 = gp13_48 | 0x30<16>
	branch (gp9_57 & 0x8000<u16>) == 0<16> l03DE
l03DA:
	Mem80[gp11_43 + 2<16>:word16] = SEQ(SLICE(Mem73[gp11_43 + 2<16>:word16], byte, 8), SLICE(gp13_48, byte, 0))
	goto l03E1
l03DE:
	Mem75[gp11_43 + 2<16>:word16] = SEQ(SLICE(gp13_48, byte, 0), SLICE(Mem73[gp11_43 + 2<16>:word16], byte, 0))
	gp11_43 = gp11_43 - 1<16>
l03E1:
	gp1_129 = gp1_64
	branch gp1_64 != 0<16> l03D4
l03E4:
	branch (gp9_57 & 0x8000<u16>) == 0<16> l03E9
l03E6:
	Mem97[gp11_43 + 2<16>:word16] = SEQ(SLICE(gp10_50, byte, 0), SLICE(Mem92[gp11_43 + 2<16>:word16], byte, 0))
	goto l03EB
l03E9:
	Mem94[gp11_43 + 2<16>:word16] = SEQ(SLICE(Mem92[gp11_43 + 2<16>:word16], byte, 8), SLICE(gp10_50, byte, 0))
l03EB:
	return gp1
cvia_exit:


word16 cvla(word32 gp12_gp13, word16 gp0, word16 gp1, word16 gp2)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_long_word
// MayUse:  gp0:[0..15] gp1:[0..15] gp2:[0..15] Sequence gp12:gp13:[0..31]
// LiveOut: gp0:[0..15]-pr_long_word
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
cvla_entry:
l03ED:
	gp11_40 = gp0
	gp9_42 = 6<16>
l03F2:
	Mem46[gp11_40:word16] = 0x2020<16>
	gp11_40 = gp11_40 + 1<16>
	gp9_42 = gp9_42 - 1<16>
	branch gp9_42 != 0<16> l03F2
l03F7:
	Mem56[gp11_40 - 1<16>:word16] = SEQ(SLICE(Mem46[gp11_40 - 1<16>:word16], byte, 8), SLICE(gp9_42, byte, 0))
	gp11_110 = gp11_40 - 1<16>
	gp10_138 = 0x20<16>
	gp1_181 = gp1
	branch gp1 >= 0<16> l0407
l03FE:
	gp10_138 = 0x2D<16>
	branch gp1 != 0x8000<16> l0406
l0403:
	branch gp2 != 0<16> l0406
l0405:
	gp2 = gp2 + 1<16>
l0406:
	gp1_gp2_74 = -SEQ(gp1, gp2)
	gp1_181 = SLICE(gp1_gp2_74, word16, 16) (alias)
	gp2 = SLICE(gp1_gp2_74, word16, 0) (alias)
l0407:
	gp12_gp13_289 = gp12_gp13 (alias)
l0409:
	gp2_gp3_98 = SEQ(gp1_181, gp2) / 0xA<32> * 0xA<32>
	gp9_42 = gp9_42 + 1<16>
	gp2 = SLICE(gp2_gp3_98, word16, 16) (alias)
	gp5_104 = gp2 - SLICE(gp2_gp3_98, word16, 0) (alias)
	branch (gp9_42 & 0x8000<u16>) == 0<16> l0417
l0413:
	Mem116[gp11_110:word16] = SEQ(SLICE(gp5_104, byte, 0) + 0x30<8>, SLICE(Mem111[gp11_110:word16], byte, 0))
	gp11_110 = gp11_110 - 1<16>
	goto l0419
l0417:
	Mem113[gp11_110:word16] = SEQ(SLICE(Mem111[gp11_110:word16], byte, 8), SLICE(gp5_104, byte, 0) + 0x30<8>)
l0419:
	gp12_gp13_289 = gp12_gp13_293 / 0xA<32> (alias)
	gp12_gp13_293 = gp12_gp13_289
	branch gp12_gp13_293 / 0xA<32> != 0<32> l0409
l041C:
	branch (gp9_42 + 1<16> & 0x8000<u16>) == 0<16> l0422
l041F:
	Mem147[gp11_110:word16] = SEQ(SLICE(Mem142[gp11_110:word16], byte, 8), SLICE(gp10_138, byte, 0))
	goto l0424
l0422:
	Mem144[gp11_110:word16] = SEQ(SLICE(gp10_138, byte, 0), SLICE(Mem142[gp11_110:word16], byte, 0))
l0424:
	return gp1
cvla_exit:


word16 cvfa(word32 gp1_gp2, word16 gp0, word16 & gp14Out)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_fp_num
// MayUse:  gp0:[0..15] Sequence gp1:gp2:[0..31]
// LiveOut: gp0:[0..15]-pr_fp_num gp14:[0..15]-pr_fp_num
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
cvfa_entry:
	gp1 = SLICE(gp1_gp2, word16, 16)
l0426:
	Mem50[gp0 + 7<16>:word16] = 0<16>
	gp14Out = fn043E(SEQ(gp1_gp2, 0<16>), 0<16>, 6<16>, gp0)
	return gp1
cvfa_exit:


word16 cvea(word32 gp1_gp2, word16 gp0, word16 gp3)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_efp_num
// MayUse:  gp0:[0..15] gp3:[0..15] Sequence gp1:gp2:[0..31]
// LiveOut: gp0:[0..15]-pr_efp_num
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
cvea_entry:
	gp1 = SLICE(gp1_gp2, word16, 16)
l0432:
	Mem51[gp0 + 0xA<16>:word16] = 0<16>
	fn043E(SEQ(gp1_gp2, gp3), 0<16>, 0xB<16>, gp0)
	return gp1
cvea_exit:


word16 fn043E(real48 gp12_gp13_gp14, word16 gp0, word16 gp1, word16 gp11)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      cvfa
//      cvea
// MayUse:  gp0:[0..15] gp1:[0..15] gp11:[0..15] Sequence gp12:gp13:gp14:[0..47]
// LiveOut: gp14:[0..15]-cvfa
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp2 gp3 gp4 gp5 gp6 gp7
// Preserved: gp15
fn043E_entry:
	gp12 = SLICE(gp12_gp13_gp14, word16, 32)
	gp13 = SLICE(gp12_gp13_gp14, word16, 16)
	gp14 = SLICE(gp12_gp13_gp14, word16, 0)
l043E:
	branch (gp12 & 1<u16>) == 0<16> l0450
l0440:
	branch (gp12 & 2<u16>) == 0<16> l0447
l0442:
	gp0_16 = 0x2D20<16>
	gp12_gp13_gp14 = gp12_gp13_gp14 * Mem0[0x057F<p16>:real48]
	goto l0458
l0447:
	branch gp1 == 6<16> l044D
l044C:
l044D:
	__mov(gp11, 0x0582<p16>)
	goto l04AB
l0450:
	branch (gp0 | gp12 | gp13 | gp14) == 0<16> l0456
l0454:
	branch (gp12 & 2<u16>) == 0<16> l0447
l0456:
	gp0_16 = 0x2B20<16>
l0458:
	Mem46[gp11:word16] = gp0_16
	gp2_192 = 0<16>
	gp12_gp13_311 = gp12_gp13_gp14 (alias)
	gp12_gp13_311 = gp12_gp13_gp14 (alias)
	branch (SLICE(gp12_gp13_gp14, word16, 16) & 0x100<u16>) == 0<16> l0467
l045D:
	gp14_116 = SLICE(gp12_gp13_311, word16, 0) (alias)
	branch gp12_gp13_311 < Mem46[0x0579<p16>:real48] l0464
l0460:
	gp12_gp13_311 = gp12_gp13_311 /48 Mem46[0x0579<p16>:real48]
	gp2_192 = gp2_192 + 1<16>
	goto l045D
l0464:
	gp0_60 = 0x452B<16>
	goto l0471
l0467:
	gp14_116 = SLICE(gp12_gp13_311, word16, 0) (alias)
	branch gp12_gp13_311 >= Mem46[0x057C<p16>:real48] l046F
l046B:
	gp12_gp13_311 = gp12_gp13_311 *48 Mem46[0x0579<p16>:real48]
	gp2_192 = gp2_192 + 1<16>
	goto l0467
l046F:
	gp0_60 = 0x452D<16>
l0471:
	branch gp1 == 6<16> l0476
l0473:
	Mem88[gp11 + 8<16>:word16] = gp0_60
	goto l0478
l0476:
	Mem87[gp11 + 5<16>:word16] = gp0_60
l0478:
	gp2_93 = gp2_192 / 0xA<16>
	gp2_96 = __xbr(gp2_93) | gp2_93 %s 0xA<16>
	branch gp1 == 6<16> l0482
l047F:
	Mem103[gp11 + 9<16>:word16] = gp2_96 | 0x3030<16>
	goto l0484
l0482:
	Mem102[gp11 + 6<16>:word16] = gp2_96 | 0x3030<16>
l0484:
	Mem137[gp11:word16] = SEQ(SLICE(Mem135[gp11:word16], byte, 8), SLICE(gp14_116, byte, 0) + 0x30<8>)
	Mem142[gp11 + 1<16>:word16] = SEQ(0x2E<8>, SLICE(Mem137[gp11 + 1<16>:word16], byte, 0))
	gp7_104 = 0<16>
	gp12_gp13_gp14_130 = SEQ(gp12_gp13_311, gp14_116) - CONVERT(CONVERT(SEQ(gp12_gp13_311, gp14_116), real48, int32), int32, real48)
l0493:
	gp12_gp13_gp14_148 = gp12_gp13_gp14_130 * Mem147[0x0579<p16>:real48]
	gp14_152 = SLICE(gp12_gp13_gp14_148, word16, 0) (alias)
	gp12_gp13_gp14_130 = gp12_gp13_gp14_148 - CONVERT(CONVERT(SEQ(SLICE(gp12_gp13_gp14_148, word32, 0), gp14_152), real48, int32), int32, real48)
	gp14 = SLICE(gp12_gp13_gp14_130, word16, 0) (alias)
	gp7_104 = gp7_104 + 1<16>
	branch (gp7_104 & 0x8000<u16>) == 0<16> l04A2
l049F:
	Mem181[gp11 + 1<16>:word16] = SEQ(CONVERT(gp14_152, word16, byte) + 0x30<8>, SLICE(Mem147[gp11 + 1<16>:word16], byte, 0))
	goto l04A5
l04A2:
	Mem176[gp11 + 1<16>:word16] = SEQ(SLICE(Mem147[gp11 + 1<16>:word16], byte, 8), CONVERT(gp14_152, word16, byte) + 0x30<8>)
	gp11 = gp11 + 1<16>
l04A5:
	gp1 = gp1 - 1<16>
	branch gp1 != 0<16> l0493
l04A7:
	Mem189[gp11 + 1<16>:word16] = 0x2020<16>
l04AB:
	return gp14
fn043E_exit:


void putchar(word16 gp0)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      puts
//      pr_nibble
// MayUse:  gp0:[0..15]
// LiveOut:
// Trashed:
// Preserved: gp15
putchar_entry:
l04AC:
	__console_output(gp0)
	return
putchar_exit:


void puts(word16 gp0)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_dec_word
//      pr_long_word
//      pr_fp_num
//      pr_efp_num
// MayUse:  gp0:[0..15]
// LiveOut:
// Trashed: PZN gp0 gp10 gp11 gp9
// Preserved: C gp15
puts_entry:
l04AF:
	gp11_13 = gp0
	gp0_14 = 0<16>
l04B2:
	gp0_19 = SEQ(SLICE(Mem11[gp11_13:word16], byte, 0), SLICE(gp0_14, byte, 0))
	branch gp0_19 == 0<16> l04BE
l04B5:
	putchar(gp0_19)
	gp0_14 = SEQ(SLICE(Mem11[gp11_13:word16], byte, 0), SLICE(Mem11[gp11_13:word16], byte, 0))
	branch gp0_14 == 0<16> l04BE
l04BA:
	putchar(gp0_14)
	gp11_13 = gp11_13 + 1<16>
	goto l04B2
l04BE:
	return
puts_exit:


void pr_nibble(word16 gp0)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_hex_byte
// MayUse:  gp0:[0..15]
// LiveOut:
// Trashed: CPZN gp0
// Preserved: gp15
pr_nibble_entry:
l04C0:
	branch (gp0 & 0xF<16>) >= 9<16> l04C8
l04C5:
	gp0_11 = (gp0 & 0xF<16>) + 0x30<16>
	goto l04CA
l04C8:
	gp0_11 = (gp0 & 0xF<16>) + 0x37<16>
l04CA:
	putchar(gp0_11)
	return
pr_nibble_exit:


word16 pr_hex_byte(word16 gp0)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      pr_hex_word
// MayUse:  gp0:[0..15]
// LiveOut: gp1:[0..15]-pr_hex_word
// Trashed: CPZN gp0 gp1
// Preserved: gp15
pr_hex_byte_entry:
l04CE:
	pr_nibble(gp0 >>u 4<16>)
	pr_nibble(gp0)
	return gp0
pr_hex_byte_exit:


void pr_hex_word(word16 gp0)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  gp0:[0..15]
// LiveOut:
// Trashed: CPZN gp0 gp1
// Preserved: gp15
pr_hex_word_entry:
l04D8:
	pr_hex_byte(pr_hex_byte(__xbr(gp0)))
	return
pr_hex_word_exit:


void pr_dec_word(word16 gp0)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  gp0:[0..15]
// LiveOut:
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
pr_dec_word_entry:
l04E2:
	puts(cvia(0x806E<16>, gp0))
	return
pr_dec_word_exit:


void pr_long_word(word32 gp0_gp1, word32 gp12_gp13)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  Sequence gp0:gp1:[0..31] Sequence gp12:gp13:[0..31]
// LiveOut:
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
pr_long_word_entry:
	gp1 = SLICE(gp0_gp1, word16, 0)
	gp0 = SLICE(gp0_gp1, word16, 16)
l04EC:
	puts(cvla(gp12_gp13, 0x806E<16>, gp0, gp1))
	return
pr_long_word_exit:


word16 pr_fp_num(word32 gp0_gp1)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// Called from:
//      main
// MayUse:  Sequence gp0:gp1:[0..31]
// LiveOut: gp14:[0..15]-main
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
pr_fp_num_entry:
l04F6:
	puts(cvfa(gp0_gp1, 0x806E<16>, out gp14_22))
	return gp14_22
pr_fp_num_exit:


void pr_efp_num(word32 gp0_gp1, word16 gp2)
// stackDelta: 2; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  gp2:[0..15] Sequence gp0:gp1:[0..31]
// LiveOut:
// Trashed: CPZN gp0 gp1 gp10 gp11 gp12 gp13 gp14 gp2 gp3 gp4 gp5 gp6 gp7 gp8 gp9
// Preserved: gp15
pr_efp_num_entry:
l0500:
	puts(cvea(gp0_gp1, 0x806E<16>, gp2))
	return
pr_efp_num_exit:


